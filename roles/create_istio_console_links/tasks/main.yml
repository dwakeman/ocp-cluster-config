

#- name: Get a list of all routes in istio-system namespace
#  k8s_info:
#    api_version: route.openshift.io/v1
#    kind: Route
#    namespace: istio-system
#  register: route_list

#- name: Print out the result
#  debug:
#    var: route_list

#- name: Get the Kiali Route
#  set_fact:
#    kialiRoute:  "{{ item.spec.host  }}"
#    ingressSubdomain: "{{ item.status.ingress[0].routerCanonicalHostname }}"
#  with_items: "{{ route_list.resources }}"
#  when: '"kiali" in item.metadata.name'



#- name: Print out the kialiRoute
#  debug:
#    var: kialiRoute

#- name: Get the Jaeger Route
#  set_fact:
#    jaegerRoute:  "{{ item.spec.host  }}"
#  with_items: "{{ route_list.resources }}"
#  when: '"jaeger" in item.metadata.name'

#- name: Print out the jaegerRoute
#  debug:
#    var: jaegerRoute

- name: Wait until Grafana route exists
  ignore_errors: yes
  command:  oc get route.route.openshift.io/grafana -n istio-system -o jsonpath --template='{$.status.ingress[0].conditions[0].status}'
  register: grafanaStatus
  retries: 30
  delay: 10
  until: grafanaStatus.stdout == "True"

- name: Get the grafana route object
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: grafana
    namespace: istio-system
  register: grafanaRouteObject

- name: Get the Grafana Route host
  set_fact:
    grafanaRoute:  "{{ grafanaRouteObject.resources[0].spec.host  }}"
    ingressSubdomain: "{{ grafanaRouteObject.resources[0].status.ingress[0].routerCanonicalHostname }}"

- name: Print out the ingressSubdomain
  debug:
    var: ingressSubdomain

- name: Print out the grafanaRoute
  debug:
    var: grafanaRoute

- name: Create Grafana ConsoleLink using Jinja2 templating
  k8s:
    state: present
    definition: "{{ lookup('template', 'grafana_link.j2') }}"





- name: Wait until Jaeger route exists
  ignore_errors: yes
  command:  oc get route.route.openshift.io/jaeger -n istio-system -o jsonpath --template='{$.status.ingress[0].conditions[0].status}'
  register: jaegerStatus
  retries: 30
  delay: 10
  until: jaegerStatus.stdout == "True"

- name: Get the jaeger route object
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: jaeger
    namespace: istio-system
  register: jaegerRouteObject

- name: Get the Jaeger Route host
  set_fact:
    jaegerRoute:  "{{ jaegerRouteObject.resources[0].spec.host  }}"

- name: Print out the Jaeger Route
  debug:
    var: jaegerRoute

- name: Create Jaeger ConsoleLink using Jinja2 templating
  k8s:
    state: present
    definition: "{{ lookup('template', 'jaeger_link.j2') }}"






- name: Wait until Kiali route exists
  ignore_errors: yes
  command:  oc get route.route.openshift.io/kiali -n istio-system -o jsonpath --template='{$.status.ingress[0].conditions[0].status}'
  register: kialiStatus
  retries: 30
  delay: 10
  until: kialiStatus.stdout == "True"

- name: Get the kiali route object
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: kiali
    namespace: istio-system
  register: kialiRouteObject

- name: Get the Kiali Route host
  set_fact:
    kialiRoute:  "{{ kialiRouteObject.resources[0].spec.host  }}"

- name: Print out the Kiali Route
  debug:
    var: kialiRoute

- name: Create Kiali ConsoleLink using Jinja2 templating
  k8s:
    state: present
    definition: "{{ lookup('template', 'kiali_link.j2') }}"

